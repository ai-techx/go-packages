// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/meta-metopia/go-packages/pkg/ai (interfaces: TemplateEngine)
//
// Generated by this command:
//
//	mockgen -destination=mocks/template.go -package=mocks . TemplateEngine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTemplateEngine is a mock of TemplateEngine interface.
type MockTemplateEngine struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateEngineMockRecorder
}

// MockTemplateEngineMockRecorder is the mock recorder for MockTemplateEngine.
type MockTemplateEngineMockRecorder struct {
	mock *MockTemplateEngine
}

// NewMockTemplateEngine creates a new mock instance.
func NewMockTemplateEngine(ctrl *gomock.Controller) *MockTemplateEngine {
	mock := &MockTemplateEngine{ctrl: ctrl}
	mock.recorder = &MockTemplateEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateEngine) EXPECT() *MockTemplateEngineMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockTemplateEngine) Render(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockTemplateEngineMockRecorder) Render(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockTemplateEngine)(nil).Render), arg0)
}
